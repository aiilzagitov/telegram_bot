import os
import requests
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
from dotenv import load_dotenv
from aiogram.types import BotCommand
import asyncio

load_dotenv()

TOKEN = os.getenv('BOT_TOKEN')

bot = Bot(token=TOKEN)
dp = Dispatcher()

users = {}


class ProfileStates(StatesGroup):
    weight = State()
    height = State()
    age = State()
    activity = State()
    city = State()


class FoodLogStates(StatesGroup):
    waiting_for_grams = State()

def calculate_water_goal(weight: int, activity: int) -> int:
    base = weight * 30
    activity_add = (activity // 30) * 500
    weather_add = 500
    return base + activity_add + weather_add


def calculate_calorie_goal(weight: int, height: int, age: int, activity: int) -> int:
    base = 10 * weight + 6.25 * height - 5 * age
    activity_add = activity * 7  # 7 –∫–∫–∞–ª/–º–∏–Ω—É—Ç—É
    return int(base + activity_add)


def get_food_info(product_name: str) -> dict | None:
    url = f"https://world.openfoodfacts.org/cgi/search.pl?search_terms={product_name}&json=1"
    response = requests.get(url)
    if response.ok:
        data = response.json()
        if data['products']:
            product = data['products'][0]
            return {
                'name': product.get('product_name', product_name),
                'calories': product.get('nutriments', {}).get('energy-kcal_100g', 0)
            }
    return None


@dp.message(Command('start'))
async def send_welcome(message: Message):
    help_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–æ–¥—ã, –∫–∞–ª–æ—Ä–∏–π –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\n"
        "üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/set_profile - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (–≤–µ—Å, —Ä–æ—Å—Ç, –≤–æ–∑—Ä–∞—Å—Ç, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –≥–æ—Ä–æ–¥)\n"
        "/log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> - –ó–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–∏—Ç—É—é –≤–æ–¥—É (–≤ –º–ª)\n"
        "/log_food <–ø—Ä–æ–¥—É–∫—Ç> - –ó–∞–ø–∏—Å–∞—Ç—å —Å—ä–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç\n"
        "/log_workout <—Ç–∏–ø> <–º–∏–Ω—É—Ç—ã> - –ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "/check_progress - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤–æ–¥–µ –∏ –∫–∞–ª–æ—Ä–∏—è–º\n"
    )
    await message.answer(help_text)

async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="set_profile", description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"),
        BotCommand(command="log_water", description="–ó–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–∏—Ç—É—é –≤–æ–¥—É"),
        BotCommand(command="log_food", description="–ó–∞–ø–∏—Å–∞—Ç—å —Å—ä–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç"),
        BotCommand(command="log_workout", description="–ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"),
        BotCommand(command="check_progress", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"),
    ]
    await bot.set_my_commands(commands)


@dp.message(Command('set_profile'))
async def start_profile(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–∫–≥):")
    await state.set_state(ProfileStates.weight)


@dp.message(ProfileStates.weight)
async def process_weight(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    await state.update_data(weight=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (—Å–º):")
    await state.set_state(ProfileStates.height)


@dp.message(ProfileStates.height)
async def process_height(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    await state.update_data(height=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(ProfileStates.age)


@dp.message(ProfileStates.age)
async def process_age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    await state.update_data(age=int(message.text))
    await message.answer("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –¥–µ–Ω—å?")
    await state.set_state(ProfileStates.activity)


@dp.message(ProfileStates.activity)
async def process_activity(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    await state.update_data(activity=int(message.text))
    await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    await state.set_state(ProfileStates.city)


@dp.message(ProfileStates.city)
async def process_city(message: Message, state: FSMContext):
    data = await state.get_data()
    city = message.text.strip()

    user_data = {
        'weight': data['weight'],
        'height': data['height'],
        'age': data['age'],
        'activity': data['activity'],
        'city': city,
        'water_goal': calculate_water_goal(data['weight'], data['activity']),
        'calorie_goal': calculate_calorie_goal(data['weight'], data['height'], data['age'], data['activity']),
        'logged_water': 0,
        'logged_calories': 0,
        'burned_calories': 0
    }

    users[message.from_user.id] = user_data
    await message.answer(
        f"–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n"
        f"–ù–æ—Ä–º–∞ –≤–æ–¥—ã: {user_data['water_goal']} –º–ª/–¥–µ–Ω—å\n"
        f"–ù–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {user_data['calorie_goal']} –∫–∫–∞–ª/–¥–µ–Ω—å"
    )
    await state.clear()


@dp.message(Command('log_water'))
async def log_water(message: Message):
    user_id = message.from_user.id
    if user_id not in users:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!")

    try:
        amount = int(message.text.split()[1])
        users[user_id]['logged_water'] += amount
        remaining = users[user_id]['water_goal'] - users[user_id]['logged_water']
        await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –º–ª. –û—Å—Ç–∞–ª–æ—Å—å: {remaining} –º–ª")
    except (IndexError, ValueError):
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /log_water <–æ–±—ä—ë–º –≤ –º–ª>")


@dp.message(Command('log_food'))
async def log_food(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in users:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!")

    try:
        product = message.text.split(maxsplit=1)[1]
        food_info = get_food_info(product)
        if not food_info or food_info['calories'] <= 0:
            return await message.answer("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")

        await state.update_data(food_info=food_info)
        await message.answer(
            f"{food_info['name']} - {food_info['calories']} –∫–∫–∞–ª/100–≥\n"
            "–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?"
        )
        await state.set_state(FoodLogStates.waiting_for_grams)
    except IndexError:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞>")


@dp.message(FoodLogStates.waiting_for_grams)
async def process_grams(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

    data = await state.get_data()
    grams = int(message.text)
    calories = (data['food_info']['calories'] * grams) / 100
    users[message.from_user.id]['logged_calories'] += calories
    await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {calories:.1f} –∫–∫–∞–ª")
    await state.clear()


@dp.message(Command('log_workout'))
async def log_workout(message: Message):
    types = ('–±–µ–≥','—Ö–æ–¥—å–±–∞', '–≤–µ–ª–æ—Å–∏–ø–µ–¥')
    user_id = message.from_user.id
    if user_id not in users:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!")

    try:
        _, workout_type, minutes = message.text.split()
        minutes = int(minutes)
        if workout_type not in types:
            return await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –∏–∑ —Å–ø–∏—Å–∫–∞ "
                                        f"{', '.join(types)}")


        calories_burned = {
                              '–±–µ–≥': 10,
                              '—Ö–æ–¥—å–±–∞': 5,
                              '–≤–µ–ª–æ—Å–∏–ø–µ–¥': 8
                          }.get(workout_type.lower()) * minutes

        users[user_id]['burned_calories'] += calories_burned
        water_needed = (minutes // 30) * 200
        await message.answer(
            f"üèãÔ∏è {workout_type} {minutes} –º–∏–Ω: {calories_burned} –∫–∫–∞–ª —Å–æ–∂–∂–µ–Ω–æ\n"
            f"üíß –í—ã–ø–µ–π—Ç–µ {water_needed} –º–ª –≤–æ–¥—ã"
        )
    except (ValueError, IndexError):
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /log_workout <—Ç–∏–ø> <–º–∏–Ω—É—Ç—ã>\n"
            f"<—Ç–∏–ø> in ({', '.join(types)})"
        )


@dp.message(Command('check_progress'))
async def check_progress(message: Message):
    user_id = message.from_user.id
    if user_id not in users:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!")

    user = users[user_id]
    progress = (
        f"üíß –í–æ–¥–∞: {user['logged_water']}/{user['water_goal']} –º–ª\n"
        f"üî• –ö–∞–ª–æ—Ä–∏–∏: {user['logged_calories']:.1f} —Å—ä–µ–¥–µ–Ω–æ\n"
        f"üèÉ {user['burned_calories']} —Å–æ–∂–∂–µ–Ω–æ\n"
        f"üéØ –û—Å—Ç–∞–ª–æ—Å—å: {user['calorie_goal'] - (user['logged_calories'] - user['burned_calories']):.1f} –∫–∫–∞–ª"
    )
    await message.answer(progress)

async def main():
    await set_commands(bot)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())